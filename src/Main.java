import java.time.LocalDate;

public class Main {
//    public static void printSeparator() {
//        System.out.println("+++++++++");
//        System.out.println("---------");
//    }
//    public static void printIssues(int issueCount){
//        System.out.println(issueCount);
//    }
//    public static int sum(int[] numbers){
//        int sum = 0;
//        for (int i = 0; i < numbers.length; i++) {
//            sum = sum + numbers[i];
//        }
//        return sum;
// в метод main код ниже из урока
//        int [] issuesByMonths = {4, 6, 7, 9, 2 , 5 , 12, 3, 7, 10, 6, 7, 1, 8, };
//        printSeparator();
//        for (int i = 0; i < issuesByMonths.length; i++) {
//            printIssues(issuesByMonths[i]);
//            if ((i+1) % 3 == 0) {
//                printSeparator();
//            }
//        }
//        printSeparator();
//        int total = sum(issuesByMonths);
//        printIssues(total);
//    }
    public static void main(String[] args) {
        task1();
        task2();
        task3();
    }



    private static void task1() {
        printYear(2024);
    }
    private static void task2() {
        printInstallationMassage(1,2021);
    }
    private static void task3() {
        System.out.println("Дней для доставки " + printCalculateDeliveryDays(95));
    }

    private static void printYear(int year){
        //### Задание 1
        //
        //Реализуйте метод, который получает в качестве параметра год, а затем проверяет, является ли он високосным, и выводит результат в консоль. 
        //
        //*Эту проверку вы уже реализовывали в задании по условным операторам.*
        //
        //Теперь проверку нужно обернуть в метод и использовать год, который приходит в виде параметра.
        //
        //Результат программы выведите в консоль. Если год високосный, то должно быть выведено “*номер года —* високосный год”. Если год не високосный, то, соответственно: “*номер года —* не **високосный год”.
        //
        //*Подсказку с выполнением задания вы можете найти в шпаргалке урока.*
        if(year % 4 == 0 && year % 100 != 0 || year % 400 == 0){
            System.out.println(year + " год високосный");
        } else {
            System.out.println(year + " год не високосный");
        }
    }
    //### Задание 2
    //
    //Вспомним задание 2 по условным операторам, где нам необходимо было предложить пользователю облегченную версию приложения.
    //
    //- Текст прошлого задания
    //
    //    К нам пришли коллеги и сообщили, что нам нужно знать не только операционную систему телефона, но и год его создания: от этого зависит, подойдет ли приложение для телефона или оно просто не установится.
    //
    //    Если телефон произведен с 2015 по нынешний год, то приложение будет работать корректно.
    //
    //    Если телефон произведен ранее 2015 года, то клиенту нужно посоветовать установить облегченную версию приложения.
    //
    //    Ваша задача: написать программу, которая выдает соответствующее сообщение клиенту при наличии двух условий — операционной системы телефона (iOS или Android) и года производства.
    //
    //    Если год выпуска ранее 2015 года, то к сообщению об установке нужно добавить информацию об облегченной версии.
    //
    //    Например, для iOS оно будет звучать так:
    //
    //    «Установите облегченную версию приложения для iOS по ссылке».
    //
    //    А для Android так:
    //
    //    «Установите облегченную версию приложения для Android по ссылке».
    //
    //    При этом для пользователей с телефоном с 2015 года выпуска нужно вывести обычное предложение об установке приложения.
    //
    //    Для обозначения года создания используйте переменную clientDeviceYear, где необходимо указать 2015 год.
    //
    //    **Важно**: вложенность больше двух этажей не допускается (условный оператор внутри условного оператора).
    //
    //
    //Напишите метод, куда подаются два параметра: тип операционной системы (ОС) ( 0 — iOS или 1 — Android ) и год выпуска устройства.
    //
    //Если устройство старше текущего года, предложите ему установить lite-версию (облегченную версию).
    private static void printInstallationMassage (int clientOS, int productionYear){
       int currentYear = LocalDate.now().getYear();
       String versionMassage = productionYear < currentYear ? "облегченную" : "";
       String osMassage = clientOS == 0 ? "IOS" : "android";
        System.out.printf("Установите %s версию приложения для %s", versionMassage,osMassage);
        System.out.println();
    }
    //### Задание 3
    //
    //Возвращаемся к любимой многими задаче на расчет дней доставки банковской карты от банка.
    //
    //- Текст прошлого задания
    //
    //    Вернемся к делам банковским. У нас хороший банк, поэтому для наших клиентов мы организуем доставку банковских карт на дом с четкой датой доставки. Чтобы известить клиента о том, когда будет доставлена его карта, нам нужно знать расстояние от нашего офиса до адреса доставки.
    //
    //    Правила доставки такие:
    //
    //    Доставка в пределах 20 км занимает сутки.
    //
    //    Доставка в пределах от 20 км до 60 км добавляет еще один день доставки.
    //
    //    Доставка в пределах 60 км до 100 км добавляет еще одни сутки.
    //
    //    То есть с каждым следующим интервалом доставки срок увеличивается на 1 день.
    //
    //    Напишите программу, которая выдает сообщение в консоль:
    //
    //    "Потребуется дней: " + срок доставки
    //
    //    Объявите целочисленную переменную deliveryDistance = 95, которая содержит дистанцию до клиента.
    //
    //
    //Наша задача — доработать код, а именно написать метод, который на вход принимает дистанцию и возвращает итоговое количество дней доставки.
    public static int printCalculateDeliveryDays(int distanse) {
       int start = 20;
       int step = 40;
       int result = 1;
       if (distanse >= start) {
           result = (Math.abs((distanse - start) / step) + 2);
       }
       return result;
    }

}